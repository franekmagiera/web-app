{"version":3,"sources":["components/Header.js","components/DataSourceEnum.js","api/api.js","components/SearchEntitiesForm.js","components/SparqlForm.js","components/LeftPane.js","components/SearchEntitiesTable.js","components/SparqlTable.js","components/RightPane.js","App.js","reportWebVitals.js","index.js"],"names":["Header","props","useState","showTooltip","setShowTooltip","Navbar","color","dark","expand","NavbarText","icon","faQuestionCircle","size","id","fixedWidth","href","faGithub","NavbarBrand","className","Tooltip","placement","isOpen","target","toggle","DataSourceEnum","Object","freeze","SEARCH_ENTITIES","SPARQL_QUERY","properties","1","label","2","wdk","WBK","instance","sparqlEndpoint","searchEntities","search","language","a","url","axios","get","result","data","executeQuery","query","sparqlQuery","split","body","post","SearchEntitiesForm","entity","setEntity","setLanguage","showAlert","setShowAlert","alertText","setAlertText","onSearch","message","Alert","Form","FormGroup","Label","for","Input","placeholder","onChange","event","value","onKeyDown","keyCode","preventDefault","type","name","Button","onClick","block","SparqlForm","setQuery","execute","wrap","spellcheck","LeftPane","dataSource","setDataSource","useEffect","onDataSourceChange","componentMapping","setData","handleOnSelectChange","entries","map","key","SearchEntitiesTable","wantedKeys","filtered","obj","filteredEntries","filter","pair","includes","fromEntries","dropKeys","Table","borderless","responsive","columnName","entry","element","tableData","rel","createTableData","SparqlTable","columnNames","head","vars","results","bindings","values","RightPane","dataSourceType","App","setDataSourceType","Container","fluid","Row","Col","sm","textData","JSON","stringify","blob","Blob","URL","createObjectURL","link","document","createElement","download","click","disabled","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a834eea5.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Navbar, NavbarBrand, NavbarText, Tooltip } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faGithub } from '@fortawesome/free-brands-svg-icons'\nimport { faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\n\nconst Header = (props) => {\n    const [showTooltip, setShowTooltip] = useState(false);\n    const toggleTooltip = () => setShowTooltip(!showTooltip);\n\n    return (\n        <div>\n            <Navbar color='dark' dark expand='md'>\n                <NavbarText>\n                <FontAwesomeIcon icon={faQuestionCircle} size='2x' id='tooltip-about' color='white' fixedWidth/>\n                <a href='https://github.com/franekmagiera/web-app'>\n                    <FontAwesomeIcon icon={faGithub} size='2x' fixedWidth />\n                </a>\n                </NavbarText>\n                <NavbarBrand className='mx-auto order-0'>Wikidata Explorer</NavbarBrand>\n\n                <Tooltip placement='bottom' isOpen={showTooltip} target='tooltip-about' toggle={toggleTooltip}>\n                    <h6>About Wikidata Explorer</h6>\n                    <span>Wikidata Explorer let's you search for entities present in wikidata.org end execute SPARQL queries. For more information, visit project's GitHub page by clicking on the icon next to the question mark.</span>\n                </Tooltip>\n            </Navbar>\n        </div>\n    )\n}\n\nexport default Header;\n","const DataSourceEnum = Object.freeze({\n    SEARCH_ENTITIES: 1,\n    SPARQL_QUERY: 2,\n    properties: {\n        1: {\n            label: 'Search entities'\n        },\n        2: {\n            label: 'SPARQL query'\n        }\n    }\n});\n\nexport default DataSourceEnum;\n","import axios from 'axios';\nimport WBK from 'wikibase-sdk';\n\nconst DB_INSTANCE = 'https://www.wikidata.org';\nconst SPARQL_ENDPOINT = 'https://query.wikidata.org/sparql';\nconst wdk = WBK({\n    instance: DB_INSTANCE,\n    sparqlEndpoint: SPARQL_ENDPOINT\n});\n\n// Throws an error if network request fails.\nexport const searchEntities = async (search, language) => {\n    const url = wdk.searchEntities({ search, language });\n    const result = await axios.get(url);\n    return result.data.search;\n};\n\n// Throws an error if network request fails.\nexport const executeQuery = async (query) => {\n    const [url, body] = wdk.sparqlQuery(query).split('?');\n    const result = await axios.post(url, body);\n    return result.data;\n};\n","import React, { useState } from 'react';\nimport { Form, FormGroup, Label, Input, Button, Alert } from 'reactstrap';\nimport { searchEntities } from '../api/api.js' \n\nconst SearchEntitiesForm = (props) => {\n    const [entity, setEntity] = useState('');\n    const [language, setLanguage] = useState('en');\n    const [showAlert, setShowAlert] = useState(false);\n    const [alertText, setAlertText] = useState('');\n\n    const search = async () => {\n        if (!entity) {\n            setAlertText('Entity field cannot be empty!');\n            setShowAlert(true);\n        } else {\n            setShowAlert(false);\n            try {\n                const result =  await searchEntities(entity, language);\n                props.onSearch(result);\n            } catch (error) {\n                setAlertText(error.message);\n                setShowAlert(true);\n            }\n        }\n    };\n\n    // Prevent enter from refreshing the page, make it search the entity instead.\n    const handleKeyDown = (event) => {\n        if (event.keyCode === 13) {\n            event.preventDefault();\n            search();\n        }\n    };\n\n    return (\n        <div>\n            <Alert color='danger' isOpen={showAlert} toggle={() => setShowAlert(false)}>{alertText}</Alert>\n            <Form>\n                <FormGroup>\n                    <Label for='search'>Entity</Label>\n                    <Input placeholder='What entity do you want to search for?' onChange={event => setEntity(event.target.value)} onKeyDown={handleKeyDown}></Input>\n                </FormGroup>\n                <FormGroup>\n                    <Label for='language'>Language</Label>\n                    <Input type='select' name='select' onChange={event => setLanguage(event.target.value)}>\n                        <option>en</option>\n                        <option>pl</option>\n                    </Input>\n                </FormGroup>\n            </Form>\n            <Button color='primary' onClick={search} block>Search</Button>\n        </div>\n    );\n};\n\nexport default SearchEntitiesForm;","import React, { useState } from 'react';\nimport { Form, FormGroup, Label, Input, Button, Alert } from 'reactstrap';\nimport { executeQuery } from '../api/api.js';\n\nconst SparqlForm = (props) => {\n    const exampleQuery =\n`SELECT ?continent ?continentLabel\nWHERE\n{\n    ?continent wdt:P31 wd:Q5107.\n    SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n}\nORDER BY xsd:integer(SUBSTR(STR(?continent),STRLEN(\"http://www.wikidata.org/entity/Q\")+1))`;\n\n    const [query, setQuery] = useState(exampleQuery);\n    const [showAlert, setShowAlert] = useState(false);\n    const [alertText, setAlertText] = useState('');\n\n    const execute = async () => {\n        if (!query) {\n            setAlertText('Query field cannot be empty!');\n            setShowAlert(true);\n        } else {\n            setShowAlert(false);\n            try {\n                const result = await executeQuery(query);\n                props.onSearch(result);\n            } catch (error) {\n                setAlertText(error.message);\n                setShowAlert(true);\n            }\n        }\n\n    };\n\n    return (\n        <div>\n            <Form>\n                <FormGroup>\n                    <Alert color='danger' isOpen={showAlert} toggle={() => setShowAlert(false)}>{alertText}</Alert>\n                    <Label for='sparql-query'>SPARQL query</Label>\n                    <Input type='textarea' name='query' className='textareaQuery' wrap='off' value={query} spellcheck='false' onChange={event => setQuery(event.target.value)} />\n                </FormGroup>\n            </Form>\n            <Button color='primary' onClick={execute} block>Execute</Button>\n        </div>\n    );\n};\n\nexport default SparqlForm;\n","import React, { useState, useEffect } from 'react';\nimport { Form, FormGroup, Label, Input } from 'reactstrap';\nimport DataSourceEnum from './DataSourceEnum.js';\nimport SearchEntitiesForm from './SearchEntitiesForm.js';\nimport SparqlForm from './SparqlForm.js';\n\nconst LeftPane = (props) => {\n    const [dataSource, setDataSource] = useState(DataSourceEnum.SEARCH_ENTITIES);\n\n    useEffect(() => {\n        props.onDataSourceChange(dataSource);\n    });\n\n    const componentMapping = Object.freeze({\n        [DataSourceEnum.SEARCH_ENTITIES]: <SearchEntitiesForm onSearch={props.setData} />,\n        [DataSourceEnum.SPARQL_QUERY]: <SparqlForm onSearch={props.setData } />\n    });\n\n    const handleOnSelectChange = (event) => {\n        setDataSource(event.target.value);\n        props.setData(null);\n    };\n\n    return (\n        <div className='leftPaneForm'>\n            <Form>\n                <FormGroup>\n                    <Label for='Data-source'>Data source</Label>\n                    <Input type='select' name='select' onChange={event => handleOnSelectChange(event)}>\n                        {Object.entries(DataSourceEnum.properties).map(([key, properties]) => <option value={key}>{properties.label}</option>)};\n                    </Input>\n                </FormGroup>\n            </Form>\n            {componentMapping[dataSource]}\n        </div>\n    );\n};\n\nexport default LeftPane;","import React from 'react';\nimport { Table } from 'reactstrap';\n\nconst SearchEntitiesTable = (props) => {\n    const wantedKeys = ['concepturi', 'label', 'description', 'aliases'];\n\n    const dropKeys = (obj) => {\n        const filteredEntries = Object.entries(obj).filter((pair) => wantedKeys.includes(pair[0]));\n        return Object.fromEntries(filteredEntries);\n    };\n\n    const createTableData = (key, element) => {\n        const tableData = (key === 'concepturi' ? <a href={element} target='_blank' rel='noopener noreferrer'>{element}</a> : element);\n        return <td>{tableData}</td>;\n    };\n\n    if (props.data) {\n        const filtered = props.data.map(obj => dropKeys(obj));\n        return (\n            <Table borderless responsive size='sm'>\n                <thead>\n                    <tr>\n                        {wantedKeys.map(columnName => <th>{columnName}</th>)}\n                    </tr>\n                </thead>\n                <tbody>\n                    {filtered.map(entry => <tr>{Object.entries(entry).map(([key, element]) => createTableData(key, element))}</tr>)}\n                </tbody>\n            </Table>\n        );\n    } else {\n        return <div></div>;\n    }\n};\n\nexport default SearchEntitiesTable;\n","import React from 'react';\nimport { Table } from 'reactstrap';\n\nconst SparqlTable = (props) => {\n\n    if (props.data) {\n        const columnNames = props.data.head.vars;\n        const data = props.data.results.bindings;\n\n        const createTableData = (value) => {\n            const tableData = (value.type === 'uri') ? <a href={value.value} target='_blank' rel='noopener noreferrer'>{value.value}</a> : value.value;\n            return <td>{tableData}</td>;\n        }\n        \n        return (\n            <div>\n                <Table borderless responsive size='sm'>\n                    <thead>\n                        <tr>\n                            {columnNames.map(columnName => <th>{columnName}</th>)}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {data.map(obj => <tr>{Object.values(obj).map(createTableData)}</tr>)}\n                    </tbody>\n                </Table>\n            </div>\n        );\n    } else {\n        return <div></div>;\n    }\n};\n\nexport default SparqlTable;\n","import React from 'react';\nimport DataSourceEnum from './DataSourceEnum.js';\nimport SearchEntitiesTable from './SearchEntitiesTable.js';\nimport SparqlTable from './SparqlTable.js';\n\nconst RightPane = (props) => {\n    \n    const componentMapping = Object.freeze({\n        [DataSourceEnum.SEARCH_ENTITIES]: <SearchEntitiesTable data={props.data} />,\n        [DataSourceEnum.SPARQL_QUERY]: <SparqlTable data={props.data} />\n    });\n\n    return (\n        <div>\n            {componentMapping[props.dataSourceType]}\n        </div>\n    );\n};\n\nexport default RightPane;","import React, { useState } from 'react';\nimport './App.css';\nimport { Container, Row, Col, Button } from 'reactstrap';\nimport Header from './components/Header.js';\nimport LeftPane from './components/LeftPane.js';\nimport RightPane from './components/RightPane.js';\n\nfunction App() {\n  const [data, setData] = useState(null);\n  const [dataSourceType, setDataSourceType] = useState(null);\n\n  const onExportClick = () => {\n    const textData = JSON.stringify(data);\n    const blob = new Blob([textData], { type: 'text/plain' });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.download = 'export.json';\n    link.href = url;\n    link.click();\n  };\n\n  return (\n    <div>\n      <Header />\n      <Container fluid>\n        <Row>\n          <Col sm='3' className='leftPaneCol'>\n              <LeftPane setData={setData} onDataSourceChange={setDataSourceType} />\n              <div className='exportButton'>\n                <Button color='secondary' onClick={onExportClick} disabled={!data} block>Export</Button>\n              </div>\n          </Col>\n          <Col sm='9' className='rightPanelCol'>\n              <RightPane data={data} dataSourceType={dataSourceType} />\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}